
#define CREATE_MASK(bits) ((1 << (bits + 1)) - 1)

#define PAGE_OFFSET_OFFSET_BITS             (0)
#define PAGE_TABLE_INDEX_OFFSET_BITS        (12)
#define PAGE_DIRECTORY_INDEX_OFFSET_BITS    (22)

#define PAGE_OFFSET_NUM_BITS            (12)
#define PAGE_TABLE_INDEX_NUM_BITS       (10)
#define PAGE_DIRECTORY_INDEX_NUM_BITS   (10)

#define PAGE_SIZE (1 << PAGE_OFFSET_BITS)

#define PAGE_OFFSET_MASK            CREATE_MASK(PAGE_OFFSET_NUM_BITS)
#define PAGE_TABLE_INDEX_MASK       CREATE_MASK(PAGE_TABLE_INDEX_NUM_BITS)
#define PAGE_DIRECTORY_INDEX_MASK   CREATE_MASK(PAGE_DIRECTORY_INDEX_NUM_BITS)

#define VADDR_PAGE_OFFSET(p)          (p & PAGE_OFFSET_MASK)
#define VADDR_PAGE_TABLE_INDEX(p)     ((p >> PAGE_TABLE_INDEX_OFFSET_BITS) & PAGE_TABLE_INDEX_MASK)
#define VADDR_PAGE_DIRECTORY_INDEX(p) ((p >> PAGE_DIRECTORY_INDEX_OFFSET_BITS) & PAGE_DIRECTORY_INDEX_MASK)

#define PAGE_DIRECTORY_ENTRIES      (1 << PAGE_DIRECTORY_INDEX_NUM_BITS)
#define PAGE_DIRECTORY_REGION_SIZE  (sizeof(pg_dir_entry) * PAGE_DIRECTORY_ENTRIES)

#define PAGE_TABLES             (PAGE_DIRECTORY_ENTRIES)
#define PAGE_TABLE_ENTRIES      ((1 << PAGE_TABLE_INDEX_NUM_BITS) * PAGE_TABLES)
#define PAGE_TABLE_REGION_SIZE  (sizeof(pg_tbl_entry) * PAGE_TABLE_ENTRIES)

#define MM_RESERVE_REGION_SIZE (0x1000)

typedef unsigned int pg_dir_entry;
typedef unsigned int pg_tbl_entry;

inline void *v2p(void *v);

